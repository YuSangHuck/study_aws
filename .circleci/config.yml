version: 2.1

parameters:
  workingdir_serverless:
    type: string
    default: "./serverless/lambda"

jobs:
  build:
    docker:
      - image: turtlog/alpine-awscli:golang
    environment:
      # TARGET_GIT_REMOTE: "https://github.com/YuSangHuck/study_aws" # CIRCLE_REPOSITORY_URL
      # TARGET_BRANCH: "feature/lambda/go" # CIRCLE_BRANCH
      # TARGET_PATH: '/src' # CIRCLE_WORKING_DIRECTORY == "~/project"
      TARGET_LAMBDA_FUNCTION: "hello-lambda-golang"
    steps:
      - checkout # check out source code to working directory
      - run:
          name: "[debug]Check source code"
          working_directory: './lambda/go'
          command: ls -al

      - run:
          name: "[debug]Check go environment"
          command: go env

      # - run:
      # - restore_cache: # restores saved cache if no changes are detected since last run
      #     keys:
      #       - go-mod-v4-{{ checksum "go.sum" }}

      # #  Wait for Postgres to be ready before proceeding
      # - run:
      #     name: Waiting for Postgres to be ready
      #     command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # - run:
      #     name: Run unit tests
      #     environment: # environment variables for the database url and path to migration files
      #       CONTACTS_DB_URL: "postgres://circleci-demo-go@localhost:5432/circle_test?sslmode=disable"
      #       CONTACTS_DB_MIGRATIONS: /home/circleci/project/db/migrations

      #     # store the results of our tests in the $TEST_RESULTS directory
      #     command: |
      #       PACKAGE_NAMES=$(go list ./... | circleci tests split --split-by=timings --timings-type=classname)
      #       gotestsum --junitfile ${TEST_RESULTS}/gotestsum-report.xml -- $PACKAGE_NAMES

      - run:
          name: Build go artifact
          working_directory: './lambda/go'
          command: >-
            env GOOS=linux go build -v -ldflags '-d -s -w' -a -tags netgo -installsuffix netgo -o main main.go &&
            zip function.zip main
      - run:
          name: "[debug]Check Build go artifact"
          working_directory: './lambda/go'
          command: >-
            ls -al

      # - save_cache:
      #     key: go-mod-v4-{{ checksum "go.sum" }}
      #     paths:
      #       - "/go/pkg/mod"

      - run:
          name: Setting AWS configure default
          command: >-
            aws configure set default.region $AWS_REGION_HELLO_LAMBDA_GOLANG &&
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_HELLO_LAMBDA_GOLANG &&
            aws configure set aws_secret_access_key $AWS_SECREET_KEY_HELLO_LAMBDA_GOLANG
      - run:
          name: "[debug]Check AWS configure default"
          command: >-
            aws configure list

      - run:
          name: Deploy to aws lambda
          working_directory: './lambda/go'
          command: >-
            aws lambda update-function-code --function-name $TARGET_LAMBDA_FUNCTION --zip-file fileb://function.zip

      # - run:
      #     name: Start service
      #     environment:
      #       CONTACTS_DB_URL: "postgres://circleci-demo-go@localhost:5432/circle_test?sslmode=disable"
      #       CONTACTS_DB_MIGRATIONS: /home/circleci/project/db/migrations
      #     command: ./workdir/contacts
      #     background: true # keep service running and proceed to next step

      # - run:
      #     name: Validate service is working
      #     command: |
      #       sleep 5
      #       curl --retry 10 --retry-delay 1 -X POST --header "Content-Type: application/json" -d '{"email":"test@example.com","name":"Test User"}' http://localhost:8080/contacts

      # - store_artifacts: # upload test summary for display in Artifacts
      #     path: ~/project/lambda/go/main
      #     destination: artifact-file

      # - store_test_results: # upload test results for display in Test Summary
      #     path: /tmp/test-results

  # deploy:
  #   docker:
  #     - image: turtlog/alpine-awscli:golang
  #   steps:
  #     - run:
  #         name: Setting AWS configure default
  #         command: >-
  #           aws configure set default.region $AWS_REGION_HELLO_LAMBDA_GOLANG &&
  #           aws configure set aws_access_key_id $AWS_ACCESS_KEY_HELLO_LAMBDA_GOLANG &&
  #           aws configure set aws_secret_access_key $AWS_SECREET_KEY_HELLO_LAMBDA_GOLANG
  #     - run:
  #         name: "[debug]Check AWS configure default"
  #         command: >-
  #           aws configure list

  #     - run:
  #         name: Deploy to aws lambda
  #         working_directory: './lambda/go'
  #         command: >-
  #           aws lambda update-function-code --function-name $TARGET_LAMBDA_FUNCTION --zip-file fileb://function.zip
  build-with-serverless:
    docker:
      - image: turtlog/severless-go:0.2
    steps:
      - checkout # check out source code to working directory
      # - run: ls -R | grep ":$" | sed -e 's/:$//' -e 's/[^-][^\/]*\//--/g' -e 's/^/   /' -e 's/-/|/'
      - run: pwd && echo $CIRCLE_WORKING_DIRECTORY && ls -R
      - run:
          name: "[debug]Check source code
          # working_directory: << pipeline.parameters.workingdir_serverless >>"
          working_directory: './serverless/lambda'
          command: pwd && ls -al
      - run:
          name: Setting AWS configure default
          command: >-
            aws configure set default.region $AWS_REGION_HELLO_LAMBDA_GOLANG &&
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_HELLO_LAMBDA_GOLANG --profile lambda &&
            aws configure set aws_secret_access_key $AWS_SECREET_KEY_HELLO_LAMBDA_GOLANG --profile lambda
      - run:
          name: "[debug]Check AWS configure profile lambda"
          command: >-
            aws configure list --profile lambda
      - run:
          name: "[debug]Check ~/.bashrc"
          command: cat ~/.bashrc
      - run:
          name: "[debug]Check ls '$HOME/.nvm'"
          command: ls "$HOME/.nvm"
      - run:
          name: "[debug]Check env"
          command: env
      - run:
          name: "Set nvm"
          command: >-
            export NVM_DIR="$HOME/.nvm"
            if [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            if [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
      - run:
          name: "[debug]Check env"
          command: env
      - run:
          name: "[debug]Check npm location"
          command: which npm
      - run:
          name: Deploy to aws lambda
          # working_directory: << pipeline.parameters.workingdir_serverless >>
          working_directory: './serverless/lambda'
          command: make deploy

workflows:
  version: 2
  build-deploy:
    jobs:
      - build:
        filters:
          branches:
            only:
              - feature/lambda/go
      # - deploy:
      #     requires:
      #       - build
      - build-with-serverless:
        filters:
          branches:
            only:
              - feature/serverless/go